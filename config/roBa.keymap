#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_shift_and_ctrl {
            bindings = <&kp LS(LEFT_CONTROL)>;
            key-positions = <13 12>;
        };

        right_shift_and_ctrl {
            bindings = <&kp RS(RIGHT_CONTROL)>;
            key-positions = <18 19>;
        };

        left_command {
            bindings = <&kp LEFT_COMMAND>;
            key-positions = <13 25>;
        };

        right_command {
            bindings = <&kp RIGHT_COMMAND>;
            key-positions = <30 18>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp Q             &kp W             &kp E             &kp R        &kp T                             &kp Y            &kp U  &lt 5 I            &kp O              &kp P
&mt LEFT_SHIFT A  &kp S             &kp D             &kp F        &kp G      &kp LG(L)      &trans  &kp H            &kp J  &kp K              &kp L              &mt RIGHT_SHIFT ENTER
&kp Z             &kp X             &kp C             &kp V        &kp B      &trans         &trans  &kp N            &kp M  &kp RIGHT_COMMAND  &kp RIGHT_CONTROL  &kp RIGHT_ALT
&kp LEFT_ALT      &kp LEFT_CONTROL  &kp LEFT_COMMAND  &lt 1 SPACE  &kp LANG2  &kp LANG1      &mo 3   &lt 4 BACKSPACE                                               &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q         &to_layer_0 W             &to_layer_0 E             &to_layer_0 R  &to_layer_0 T                                 &to_layer_0 Y          &to_layer_0 U  &lt_to_layer_0 5 I         &to_layer_0 O              &to_layer_0 P
&to_layer_0 A         &to_layer_0 S             &to_layer_0 D             &to_layer_0 F  &to_layer_0 G  &to_layer_0 LG(L)      &trans  &to_layer_0 H          &mkp MB1       &to_layer_0 K              &mkp MB2                   &to_layer_0 ENTER
&to_layer_0 Z         &to_layer_0 X             &to_layer_0 C             &to_layer_0 V  &to_layer_0 B  &trans                 &trans  &to_layer_0 N          &to_layer_0 M  &to_layer_0 RIGHT_COMMAND  &to_layer_0 RIGHT_CONTROL  &to_layer_0 RIGHT_ALT
&to_layer_0 LEFT_ALT  &to_layer_0 LEFT_CONTROL  &to_layer_0 LEFT_COMMAND  &trans         &trans         &trans                 &trans  &to_layer_0 BACKSPACE                                                                       &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        GAME {
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T                               &kp Y           &kp U     &lt 5 I   &kp O     &kp P
&kp A  &kp S  &kp D  &kp F      &kp G  &kp LG(L)      &none         &kp H           &mkp MB1  &mkp MB3  &mkp MB2  &kp ENTER
&kp Z  &kp X  &kp C  &kp V      &kp B  &kp TAB        &kp LEFT_GUI  &kp N           &kp M     &kp J     &kp K     &kp L
&none  &none  &none  &kp SPACE  &none  &none          &lt 3 I       &kp LEFT_SHIFT                                &to 0
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        NUMBER {
            bindings = <
&trans        &kp NUMBER_7  &kp N8        &kp NUMBER_9  &trans                                 &trans      &trans           &trans  &trans  &kp LG(LC(V))
&trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans      &kp C_VOLUME_DOWN  &kp K_MUTE  &kp C_VOLUME_UP  &trans  &trans  &trans
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &kp LG(LC(V))      &trans      &trans           &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans  &to 2       &trans             &trans                                       &to 0
            >;
        };

        SYMBOL {
            bindings = <
&kp SLASH       &kp PERCENT       &kp EQUAL     &kp ASTERISK  &kp AMPERSAND                           &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN      &kp GREATER_THAN
&kp QUESTION    &kp EXCLAMATION   &kp PERIOD    &kp COMMA     &kp DOLLAR     &trans        &trans     &kp HASH        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON          &kp SEMICOLON
&kp CARET       &kp BACKSLASH     &kp GRAVE     &kp MINUS     &kp PLUS       &kp PIPE      &kp TILDE  &kp AT_SIGN     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &trans        &trans         &trans        &trans     &trans                                                                          &to 0
            >;
        };

        SCROLL {
            bindings = <
&kp ESCAPE  &trans                 &kp UP_ARROW    &trans     &trans                                  &trans  &mkp MB4                &trans             &mkp MB5  &trans
&kp TAB     &mt LEFT_COMMAND LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans            &trans        &trans  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &trans    &kp SPACE
&trans      &trans                 &trans          &trans     &trans  &bt BT_SEL 0      &bt BT_SEL 1  &trans  &trans                  &trans             &trans    &trans
&trans      &trans                 &trans          &trans     &trans  &trans            &trans        &trans                                                       &to 0
            >;
        };
    };
};
