#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_shift_and_ctrl {
            bindings = <&kp LS(LEFT_CONTROL)>;
            key-positions = <13 12>;
        };

        right_shift_and_ctrl {
            bindings = <&kp RS(RIGHT_CONTROL)>;
            key-positions = <18 19>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp Q             &kp W             &kp E             &kp R        &kp T                           &kp Y            &kp U  &lt 4 I            &kp O              &kp P
&mt LEFT_SHIFT A  &kp S             &kp D             &kp F        &kp G   &kp LG(L)       &trans  &kp H            &kp J  &kp K              &kp L              &mt RIGHT_SHIFT ENTER
&kp Z             &kp X             &kp C             &kp V        &kp B   &kp ESCAPE      &trans  &kp N            &kp M  &kp RIGHT_COMMAND  &kp RIGHT_CONTROL  &kp RIGHT_ALT
&kp LEFT_ALT      &kp LEFT_CONTROL  &kp LEFT_COMMAND  &lt 2 SPACE  &trans  &trans          &mo 2   &lt 3 BACKSPACE                                               &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        MOUSE {
            bindings = <
&kp Q         &kp W             &kp E             &kp R      &kp T                          &kp Y          &kp U     &kp I              &kp O              &kp P
&kp A         &kp S             &kp D             &kp F      &kp G   &kp LG(L)      &trans  &kp H          &mkp MB1  &kp K              &mkp MB2           &kp ENTER
&kp Z         &kp X             &kp C             &kp V      &kp B   &trans         &trans  &kp N          &kp M     &kp RIGHT_COMMAND  &kp RIGHT_CONTROL  &kp RIGHT_ALT
&kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp SPACE  &trans  &trans         &trans  &kp BACKSPACE                                                  &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        MOUSE1 {
            bindings = <
&kp TAB       &mt LEFT_COMMAND NUMBER_7  &kp N8        &kp NUMBER_9  &trans                      &kp K_MUTE  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp LG(LC(V))
&trans        &kp NUMBER_4               &kp NUMBER_5  &kp NUMBER_6  &trans  &trans      &trans  &trans      &mkp MB1         &mkp MB3          &mkp MB2           &trans
&kp NUMBER_0  &kp NUMBER_1               &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &trans  &trans      &mkp MB4         &trans            &mkp MB5           &trans
&trans        &trans                     &trans        &trans        &trans  &to 5       &trans  &trans                                                            &to 0
            >;
        };

        SYMBOL {
            bindings = <
&kp SLASH       &kp PERCENT       &kp EQUAL     &kp ASTERISK  &kp AMPERSAND                            &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN      &kp GREATER_THAN
&kp QUESTION    &kp EXCLAMATION   &kp PERIOD    &kp COMMA     &kp DOLLAR     &trans         &trans     &kp HASH        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON          &kp SEMICOLON
&kp CARET       &kp BACKSLASH     &kp GRAVE     &kp PERCENT   &kp PLUS       &kp MINUS      &kp TILDE  &kp AT_SIGN     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &trans        &trans         &trans         &trans     &trans                                                                          &to 0
            >;
        };

        SCROLL {
            bindings = <
&trans          &trans      &kp UP_ARROW    &trans     &trans                                  &trans     &trans                  &trans             &trans  &trans
&trans          &kp LEFT    &kp DOWN_ARROW  &kp RIGHT  &trans  &trans            &trans        &trans     &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &trans  &trans
&trans          &trans      &trans          &trans     &trans  &bt BT_SEL 0      &bt BT_SEL 1  &trans     &trans                  &trans             &trans  &trans
&bt BT_CLR_ALL  &bt BT_CLR  &trans          &kp LANG2  &trans  &trans            &trans        &kp LANG1                                                     &to 0
            >;
        };

        GAME {
            bindings = <
&kp Q         &kp W  &kp E  &kp R         &kp T                                         &kp Y   &kp U     &kp I     &kp O     &kp P
&kp A         &kp S  &kp D  &kp F         &kp G         &kp LG(L)         &trans        &kp H   &mkp MB1  &mkp MB3  &mkp MB2  &kp ENTER
&kp Z         &kp X  &kp C  &kp V         &kp B         &kp ESCAPE        &trans        &kp N   &kp M     &kp J     &kp K     &kp L
&kp LEFT_WIN  &none  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4  &kp N5                                &to 0
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };
    };
};
